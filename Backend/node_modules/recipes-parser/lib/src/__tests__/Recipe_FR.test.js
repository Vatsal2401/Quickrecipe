"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const __1 = __importDefault(require(".."));
const units_json_1 = __importDefault(require("../../nlp/fr/units.json"));
const global_unit_json_1 = __importDefault(require("../../nlp/fr/global_unit.json"));
const rules = fs_1.default.readFileSync(path.join(__dirname, `../../nlp/fr/rules.pegjs`), {
    encoding: "utf8",
});
const lib = new __1.default(rules, units_json_1.default, global_unit_json_1.default);
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["une demie cuillère à soupe de riz"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("riz");
        expect(result[0].result.unit).toEqual("tablespoon");
        expect(result[0].result.amount).toEqual(0.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["une demie cuillère à cafe de riz"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("riz");
        expect(result[0].result.unit).toEqual("teaspoon");
        expect(result[0].result.amount).toEqual(0.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["70 cl de lait"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("lait");
        expect(result[0].result.unit).toEqual("cl");
        expect(result[0].result.amount).toEqual(70);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["500 g de riz"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("riz");
        expect(result[0].result.unit).toEqual("g");
        expect(result[0].result.amount).toEqual(500);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 kg de filet de poulet"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("filet de poulet");
        expect(result[0].result.unit).toEqual("kg");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 l de moules"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("moules");
        expect(result[0].result.unit).toEqual("l");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2 poivrons"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poivrons");
        expect(result[0].result.amount).toEqual(2);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 pommes de terre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("pommes de terre");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["40 g de lardons"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("lardons");
        expect(result[0].result.unit).toEqual("g");
        expect(result[0].result.amount).toEqual(40);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["30 g de gruyère"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("gruyère");
        expect(result[0].result.unit).toEqual("g");
        expect(result[0].result.amount).toEqual(30);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 oeufs"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("oeufs");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 bouteilles de poivre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poivre");
        expect(result[0].result.unit).toEqual("bottle");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 poignee de poivre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poivre");
        expect(result[0].result.unit).toEqual("handful");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 sachet de poivre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poivre");
        expect(result[0].result.unit).toEqual("bag");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["100 grammes de pépites de chocolat"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("pépites de chocolat");
        expect(result[0].result.unit).toEqual("g");
        expect(result[0].result.amount).toEqual(100);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 c.à c. de levure"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("levure");
        expect(result[0].result.unit).toEqual("teaspoon");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1/2 sachet de levure"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("levure");
        expect(result[0].result.unit).toEqual("bag");
        expect(result[0].result.amount).toEqual(0.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 doses de safran"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("safran");
        expect(result[0].result.unit).toEqual("dose");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = [
        "1 à 2 doses de safran(ou de préparation spéciale paëlla)",
    ];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("à 2 doses de safran(ou de préparation spéciale paëlla)");
        expect(result[0].result.unit).toEqual(undefined);
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1/4 chorizo"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("chorizo");
        expect(result[0].result.unit).toEqual(undefined);
        expect(result[0].result.amount).toEqual(0.25);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2 c. à soupe de graines de chia"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("graines de chia");
        expect(result[0].result.unit).toEqual("tablespoon");
        expect(result[0].result.amount).toEqual(2);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 c. à soupe d’huile de coco + pour le moule"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("d’huile de coco + pour le moule");
        expect(result[0].result.unit).toEqual("tablespoon");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 tranche de citron"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("citron");
        expect(result[0].result.unit).toEqual("slice");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 zeste d’huile de coco"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("d’huile de coco");
        expect(result[0].result.unit).toEqual("zest");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1/2 lit. de fond de veau en poudre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("fond de veau en poudre");
        expect(result[0].result.unit).toEqual("l");
        expect(result[0].result.amount).toEqual(0.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2-3 c. à café Fond de veau en poudre"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("Fond de veau en poudre");
        expect(result[0].result.unit).toEqual("teaspoon");
        expect(result[0].result.amount).toEqual(2.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 demi poulet"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poulet");
        expect(result[0].result.amount).toEqual(1.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2-3 poulet"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poulet");
        expect(result[0].result.amount).toEqual(2.5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2 sachet de poulet"];
    const result = yield lib.getIngredientsFromText(recipe, false);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("poulet");
        expect(result[0].result.unit).toEqual("sachet");
        expect(result[0].result.amount).toEqual(2);
    }
    else {
        throw new Error("fail");
    }
}));
test("Test recipe error", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["cette phrase ne fonctionnera pas"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result[0].unknown.reasons).not.toBeUndefined();
}));
test("Test recipe instructions - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 c. à s. d'huile d'olive"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("d'huile d'olive");
        expect(result[0].result.unit).toEqual("tablespoon");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
