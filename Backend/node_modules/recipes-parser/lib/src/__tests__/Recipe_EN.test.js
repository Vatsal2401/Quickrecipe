"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const __1 = __importDefault(require(".."));
const units_json_1 = __importDefault(require("../../nlp/en/units.json"));
const global_unit_json_1 = __importDefault(require("../../nlp/en/global_unit.json"));
const rules = fs_1.default.readFileSync(path.join(__dirname, `../../nlp/en/rules.pegjs`), {
    encoding: "utf8",
});
const lib = new __1.default(rules, units_json_1.default, global_unit_json_1.default);
test("Get ingredient in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["20gr of sugar"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("sugar");
        expect(result[0].result.unit).toEqual("g");
        expect(result[0].result.amount).toEqual(20);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 tablespoon water"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("water");
        expect(result[0].result.unit).toEqual("tablespoon");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["3 cl. fresh raspberries"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("fresh raspberries");
        expect(result[0].result.unit).toEqual("cl");
        expect(result[0].result.amount).toEqual(3);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["6 slices white bread"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("white bread");
        expect(result[0].result.unit).toEqual("slice");
        expect(result[0].result.amount).toEqual(6);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 slice white bread"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("white bread");
        expect(result[0].result.unit).toEqual("slice");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["Â¾ cup white sugar"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("white sugar");
        expect(result[0].result.unit).toEqual("cup");
        expect(result[0].result.amount).toEqual(0.75);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["1 pinch ground nutmeg, or to taste"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("ground nutmeg, or to taste");
        expect(result[0].result.unit).toEqual("pinch");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["10 mlg milk"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("milk");
        expect(result[0].result.unit).toEqual("mg");
        expect(result[0].result.amount).toEqual(10);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["10 1/2 liter milk"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("milk");
        expect(result[0].result.unit).toEqual("l");
        expect(result[0].result.amount).toEqual(5);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["2 1/2 liter milk"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("milk");
        expect(result[0].result.unit).toEqual("l");
        expect(result[0].result.amount).toEqual(1);
    }
    else {
        throw new Error("fail");
    }
}));
test("Get nutrients in recipe - simple string (NLP)", () => __awaiter(void 0, void 0, void 0, function* () {
    const recipe = ["5 quarter of orange"];
    const result = yield lib.getIngredientsFromText(recipe, true);
    expect(result).not.toBeUndefined();
    if (result[0] && result[0].result) {
        expect(result[0].result.ingredient).toEqual("orange");
        expect(result[0].result.amount).toEqual(1.25);
    }
    else {
        throw new Error("fail");
    }
}));
